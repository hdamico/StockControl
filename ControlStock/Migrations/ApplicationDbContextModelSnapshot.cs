// <auto-generated />
using ControlStock.DAL;
using ControlStock.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace ControlStock.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ControlStock.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ControlStock.Models.Comprobante", b =>
                {
                    b.Property<int>("ComprobanteID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EntidadID");

                    b.Property<string>("FechaComprobante");

                    b.Property<string>("NumeroComprobante")
                        .HasColumnName("ComprobanteNumero")
                        .HasMaxLength(50);

                    b.Property<int>("TipoComprobanteID");

                    b.HasKey("ComprobanteID");

                    b.HasIndex("EntidadID");

                    b.HasIndex("TipoComprobanteID");

                    b.ToTable("Comprobantes","Stock");
                });

            modelBuilder.Entity("ControlStock.Models.Deposito", b =>
                {
                    b.Property<int>("DepositoID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("Deposito")
                        .HasMaxLength(100);

                    b.Property<int>("TipoDepositoID");

                    b.HasKey("DepositoID");

                    b.HasIndex("TipoDepositoID");

                    b.ToTable("Depositos","Stock");
                });

            modelBuilder.Entity("ControlStock.Models.DetalleComprobante", b =>
                {
                    b.Property<int>("DetalleComprbanteID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cantidad");

                    b.Property<int>("ComprobanteID");

                    b.Property<decimal>("Importe");

                    b.Property<int>("ProductoID");

                    b.HasKey("DetalleComprbanteID");

                    b.HasIndex("ComprobanteID");

                    b.HasIndex("ProductoID");

                    b.ToTable("DetallesComprobantes","Stock");
                });

            modelBuilder.Entity("ControlStock.Models.Entidad", b =>
                {
                    b.Property<int>("EntidadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EntidadID");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("TipoEntidad")
                        .HasColumnName("TipoEntidad");

                    b.HasKey("EntidadID");

                    b.ToTable("Entidad");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Entidad");
                });

            modelBuilder.Entity("ControlStock.Models.Marca", b =>
                {
                    b.Property<int>("MarcaID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("Marca")
                        .HasMaxLength(100);

                    b.HasKey("MarcaID");

                    b.ToTable("Marcas","Productos");
                });

            modelBuilder.Entity("ControlStock.Models.Producto", b =>
                {
                    b.Property<int>("ProductoID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MarcaID");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("Producto")
                        .HasMaxLength(200);

                    b.Property<int>("RubroID");

                    b.Property<int>("TipoProductoID");

                    b.HasKey("ProductoID");

                    b.HasIndex("MarcaID");

                    b.HasIndex("RubroID");

                    b.HasIndex("TipoProductoID");

                    b.ToTable("Productos","Productos");
                });

            modelBuilder.Entity("ControlStock.Models.Rubro", b =>
                {
                    b.Property<int>("RubroID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("Rubro")
                        .HasMaxLength(100);

                    b.HasKey("RubroID");

                    b.ToTable("Rubros","Productos");
                });

            modelBuilder.Entity("ControlStock.Models.TipoComprobante", b =>
                {
                    b.Property<int>("TipoComprobanteID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Columna");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("TipoComprobante")
                        .HasMaxLength(100);

                    b.Property<int>("Sistema");

                    b.HasKey("TipoComprobanteID");

                    b.ToTable("TiposComprobantes","Stock");
                });

            modelBuilder.Entity("ControlStock.Models.TipoDeposito", b =>
                {
                    b.Property<int>("TipoDepositoID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("TipoDeposito")
                        .HasMaxLength(100);

                    b.HasKey("TipoDepositoID");

                    b.ToTable("TiposDepositos","Stock");
                });

            modelBuilder.Entity("ControlStock.Models.TipoProducto", b =>
                {
                    b.Property<int>("TipoProductoID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("TipoProducto")
                        .HasMaxLength(100);

                    b.HasKey("TipoProductoID");

                    b.ToTable("TiposProductos","Productos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ControlStock.Models.Cliente", b =>
                {
                    b.HasBaseType("ControlStock.Models.Entidad");

                    b.Property<string>("Codigo")
                        .HasColumnName("Codigo")
                        .HasMaxLength(20);

                    b.Property<string>("Nombre")
                        .HasColumnName("Cliente")
                        .HasMaxLength(200);

                    b.ToTable("Clientes","Clientes");

                    b.HasDiscriminator().HasValue("Cliente");
                });

            modelBuilder.Entity("ControlStock.Models.Proveedor", b =>
                {
                    b.HasBaseType("ControlStock.Models.Entidad");

                    b.Property<string>("CUIT")
                        .HasColumnName("CUIT");

                    b.Property<string>("RazonSocial")
                        .HasColumnName("Razon Social");

                    b.ToTable("Proveedores","Proveedores");

                    b.HasDiscriminator().HasValue("Proveedor");
                });

            modelBuilder.Entity("ControlStock.Models.Comprobante", b =>
                {
                    b.HasOne("ControlStock.Models.Entidad", "Entidad")
                        .WithMany()
                        .HasForeignKey("EntidadID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlStock.Models.TipoComprobante", "TipoComprobante")
                        .WithMany("Comprobantes")
                        .HasForeignKey("TipoComprobanteID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ControlStock.Models.Deposito", b =>
                {
                    b.HasOne("ControlStock.Models.TipoDeposito", "TipoDeposito")
                        .WithMany("Depositos")
                        .HasForeignKey("TipoDepositoID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ControlStock.Models.DetalleComprobante", b =>
                {
                    b.HasOne("ControlStock.Models.Comprobante", "Comprobante")
                        .WithMany("DetallesComprobantes")
                        .HasForeignKey("ComprobanteID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlStock.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ControlStock.Models.Producto", b =>
                {
                    b.HasOne("ControlStock.Models.Marca", "Marca")
                        .WithMany("Productos")
                        .HasForeignKey("MarcaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlStock.Models.Rubro", "Rubro")
                        .WithMany("Productos")
                        .HasForeignKey("RubroID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ControlStock.Models.TipoProducto", "TipoProducto")
                        .WithMany("Productos")
                        .HasForeignKey("TipoProductoID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ControlStock.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ControlStock.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ControlStock.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ControlStock.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
